import pytest
from unittest.mock import Mock, patch

from src.router import RouterAgent, AgentType
from src.conversation import ConversationManager


class TestChatAPI:
    @pytest.fixture
    def mock_app_dependencies(self):
        with patch('redis.Redis') as mock_redis_class, \
                patch('src.rag.retriever.RAGRetriever') as mock_rag_class:
            mock_redis = Mock()
            mock_redis_class.return_value = mock_redis

            mock_rag = Mock()
            mock_rag_class.return_value = mock_rag

            yield {
                'redis': mock_redis,
                'rag': mock_rag
            }

    @pytest.mark.asyncio
    async def test_chat_endpoint_math_query(self, mock_app_dependencies):
        from src.router import RouterAgent
        from src.conversation import ConversationManager

        conv_manager = ConversationManager(mock_app_dependencies['redis'])

        with patch('src.router.KnowledgeAgent'):
            router = RouterAgent(mock_app_dependencies['rag'], conv_manager)

            agent_type = router.classify("What is 5 + 3?", "conv123", "user456")
            assert agent_type == AgentType.MATH

    @pytest.mark.asyncio
    async def test_chat_endpoint_knowledge_query(self, mock_app_dependencies):
        from src.router import RouterAgent
        from src.conversation import ConversationManager

        conv_manager = ConversationManager(mock_app_dependencies['redis'])

        with patch('src.router.KnowledgeAgent'):
            router = RouterAgent(mock_app_dependencies['rag'], conv_manager)

            agent_type = router.classify("Qual a taxa da maquininha?", "conv123", "user456")
            assert agent_type == AgentType.KNOWLEDGE

    def test_chat_payload_validation(self):
        valid_payload = {
            "message": "Qual a taxa da maquininha?",
            "user_id": "client789",
            "conversation_id": "conv-1234"
        }

        assert "message" in valid_payload
        assert "user_id" in valid_payload
        assert "conversation_id" in valid_payload

        assert isinstance(valid_payload["message"], str)
        assert isinstance(valid_payload["user_id"], str)
        assert isinstance(valid_payload["conversation_id"], str)

    def test_chat_response_structure(self):
        expected_response = {
            "response": "Here is the answer with personality.",
            "source_agent_response": "Text generated by the specialized agent.",
            "agent_workflow": [
                {"agent": "RouterAgent", "decision": "KnowledgeAgent"},
                {"agent": "KnowledgeAgent"}
            ]
        }

        assert "response" in expected_response
        assert "source_agent_response" in expected_response
        assert "agent_workflow" in expected_response

        workflow = expected_response["agent_workflow"]
        assert isinstance(workflow, list)
        assert len(workflow) >= 1
        assert all("agent" in step for step in workflow)
